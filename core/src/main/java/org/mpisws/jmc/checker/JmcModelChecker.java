package org.mpisws.jmc.checker;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mpisws.jmc.runtime.HaltCheckerException;
import org.mpisws.jmc.runtime.HaltExecutionException;
import org.mpisws.jmc.runtime.HaltTaskException;
import org.mpisws.jmc.runtime.JmcRuntime;
import org.mpisws.jmc.runtime.JmcRuntimeConfiguration;
import org.mpisws.jmc.runtime.RuntimeEvent;

/**
 * The JmcModelChecker class is responsible for managing the model checking process. It uses a
 * JmcCheckerConfiguration to configure the process and a JmcTestTarget to specify the program under
 * test.
 */
public class JmcModelChecker {

    private static final Logger LOGGER = LogManager.getLogger(JmcModelChecker.class);

    private final JmcCheckerConfiguration config;

    /**
     * Constructs a new JMC model checker with the default configuration.
     */
    public JmcModelChecker() {
        this(new JmcCheckerConfiguration.Builder().build());
    }

    /**
     * Constructs a new JMC model checker with the given configuration.
     *
     * @param config the configuration to use
     */
    public JmcModelChecker(JmcCheckerConfiguration config) {
        this.config = config;
    }

    /**
     * Checks the given test target. No instrumentation involved
     *
     * @param target the test target to check
     * @return the report generated by the model checker
     */
    public JmcModelCheckerReport check(JmcTestTarget target) {
        JmcRuntimeConfiguration runtimeConfig = config.toRuntimeConfiguration();
        JmcModelCheckerReport report = new JmcModelCheckerReport();
        Long startTime = System.nanoTime();
        JmcRuntime.setup(runtimeConfig);
        int numIterations = config.getNumIterations();
        try {
            for (int i = 0; i < numIterations; i++) {
                try {
                    JmcRuntime.initIteration(i, report);
                    target.invoke();
                    RuntimeEvent mainEndEvent =
                            new RuntimeEvent.Builder()
                                    .type(RuntimeEvent.Type.FINISH_EVENT)
                                    .taskId(1L)
                                    .build();
                    JmcRuntime.updateEvent(mainEndEvent);
                    JmcRuntime.resetIteration(i);
                } catch (HaltTaskException e) {
                    LOGGER.debug(
                            "Halting execution: {} due to main thread halted: {}",
                            i,
                            e.getMessage());
                    break;
                } catch (HaltExecutionException e) {
                    report.setErrorIteration(i);
                    report.setErrorMessage(e.getMessage());
                    LOGGER.error("Halting execution: {} due to exception: {}", i, e.getMessage());
                    break;
                } catch (AssertionError e) {
                    report.setErrorIteration(i);
                    report.setErrorMessage(String.format("Halting execution: %d due to assertion error: %s", i, e.getMessage()));
                    LOGGER.error("Assertion error in iteration {}: {}", i, e.getMessage());
                    break;
                }
            }
        } catch (HaltCheckerException e) {
            if (e.isOkay()) {
                LOGGER.info("Model checking completed successfully.");
            } else {
                report.setErrorIteration(-1);
                report.setErrorMessage(String.format("Model checking failed: %s", e.getMessage()));
                LOGGER.error("Model checking failed: {}", e.getMessage());
                System.exit(1);
            }
        } finally {
            Long endTime = System.nanoTime();
            JmcRuntime.tearDown();
            report.setTotalTimeMillis(endTime - startTime);
        }
        return report;
    }

    public JmcModelCheckerReport replay(JmcTestTarget target, Long seed, int iteration) {
        config.setSeed(seed);
        JmcRuntimeConfiguration runtimeConfig = config.toRuntimeConfiguration();
        JmcRuntime.setup(runtimeConfig);
        JmcModelCheckerReport report = new JmcModelCheckerReport();
        Long startTime = System.currentTimeMillis();
        try {
            JmcRuntime.initIteration(iteration, report);
            target.invoke();
            RuntimeEvent mainEndEvent =
                    new RuntimeEvent.Builder()
                            .type(RuntimeEvent.Type.FINISH_EVENT)
                            .taskId(1L)
                            .build();
            JmcRuntime.updateEvent(mainEndEvent);
            JmcRuntime.resetIteration(iteration);
        } catch (HaltTaskException e) {
            LOGGER.debug(
                    "Halting execution: due to main thread halted: {}",
                    e.getMessage());
        } catch (HaltExecutionException e) {
            report.setErrorMessage(e.getMessage());
            LOGGER.error("Halting execution: due to exception: {}", e.getMessage());
        } catch (AssertionError e) {
            report.setErrorMessage(String.format("Halting execution due to assertion error: %s", e.getMessage()));
            LOGGER.error("Assertion error: {}", e.getMessage());
        } catch (HaltCheckerException e) {
            if (e.isOkay()) {
                LOGGER.info("Replay completed successfully.");
            } else {
                report.setErrorIteration(-1);
                report.setErrorMessage(String.format("Replaying failed: %s", e.getMessage()));
                LOGGER.error("Replaying failed: {}", e.getMessage());
            }
        } finally {
            Long endTime = System.currentTimeMillis();
            JmcRuntime.tearDown();
            report.setTotalTimeMillis(endTime - startTime);
        }
        return report;
    }
}
