package org.mpisws.jmc.checker;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mpisws.jmc.checker.exceptions.JmcCheckerException;
import org.mpisws.jmc.checker.exceptions.JmcCheckerTimeoutException;
import org.mpisws.jmc.runtime.HaltCheckerException;
import org.mpisws.jmc.runtime.HaltExecutionException;
import org.mpisws.jmc.runtime.HaltTaskException;
import org.mpisws.jmc.runtime.JmcRuntime;
import org.mpisws.jmc.runtime.JmcRuntimeConfiguration;
import org.mpisws.jmc.runtime.RuntimeEvent;
import org.mpisws.jmc.util.ExceptionUtil;

/**
 * The JmcModelChecker class is responsible for managing the model checking process. It uses a
 * JmcCheckerConfiguration to configure the process and a JmcTestTarget to specify the program under
 * test.
 */
public class JmcModelChecker {

    private static final Logger LOGGER = LogManager.getLogger(JmcModelChecker.class);

    private JmcCheckerConfiguration config;

    /**
     * Constructs a new JMC model checker with the given configuration.
     *
     * @param config the configuration to use
     */
    public JmcModelChecker(JmcCheckerConfiguration config) {
        this.config = config;
    }

    /**
     * Checks the given test target. No instrumentation involved
     *
     * @param target the test target to check
     * @return the report generated by the model checker
     */
    public JmcModelCheckerReport check(JmcTestTarget target) throws JmcCheckerException {
        JmcRuntimeConfiguration runtimeConfig = config.toRuntimeConfiguration();
        JmcModelCheckerReport report = new JmcModelCheckerReport(runtimeConfig.getReportPath());
        report.setupReportPath();
        Long startTime = System.currentTimeMillis();
        Long timeoutMarker = 0L;
        if (config.getTimeout() != null) {
            timeoutMarker = startTime + config.getTimeout().toMillis();
        }
        JmcRuntime.setup(runtimeConfig);
        int numIterations = config.getNumIterations();
        int iteration = 0;
        try {
            LOGGER.info("JMC checker started");
            while (true) {
                try {
                    LOGGER.debug("Running iteration {}", iteration);
                    JmcRuntime.initIteration(iteration, report);
                    target.invoke();
                    RuntimeEvent mainEndEvent =
                            new RuntimeEvent.Builder()
                                    .type(RuntimeEvent.Type.FINISH_EVENT)
                                    .taskId(1L)
                                    .build();
                    JmcRuntime.updateEvent(mainEndEvent);
                } catch (HaltTaskException e) {
                    LOGGER.debug(
                            "Halting execution: {} due to main thread halted: {}",
                            iteration,
                            e.getMessage());
                } catch (HaltExecutionException e) {
                    report.setErrorIteration(iteration);
                    report.setErrorMessage(e.getMessage());
                    LOGGER.error(
                            "Halting execution: {} due to exception: {}",
                            iteration,
                            e.getMessage());
                } catch (Exception e) {
                    // Catchall for any other exceptions that may occur
                    report.setErrorIteration(iteration);
                    if (ExceptionUtil.isAssertionError(e)) {
                        report.setErrorMessage(
                                String.format(
                                        "Halting execution: %d due to assertion error: %s",
                                        iteration, e.getMessage()));
                        LOGGER.error("Assertion error in iteration {}: {}", iteration, e.getMessage());
                        JmcRuntime.recordTrace();
                        throw HaltCheckerException.error(
                                "Assertion error in iteration " + iteration + ": " + e.getMessage());
                    } else {
                        throw e;
                    }
                } finally {
                    JmcRuntime.resetIteration(iteration);
                    if (iteration % 50000 == 0) {
                        LOGGER.info("Completed {} iterations", iteration);
                        System.gc();
                    }
                    iteration++;
                    if (numIterations != 0 && iteration >= numIterations) {
                        throw HaltCheckerException.ok();
                    }
                    long curTime = System.currentTimeMillis();
                    if (timeoutMarker != 0L && curTime > timeoutMarker) {
                        report.setErrorIteration(iteration);
                        String errorMessage =
                                String.format("Halting execution: %d due to timeout", iteration);
                        report.setErrorMessage(errorMessage);
                        LOGGER.error(errorMessage);
                        throw HaltCheckerException.error(errorMessage);
                    }
                }
            }
        } catch (HaltCheckerException e) {
            if (e.isOkay()) {
                report.setTotalIterations(iteration - 1);
                LOGGER.info("Model checking completed covering: {} iterations", iteration - 1);
            } else if (e.isTimeout()) {
                report.setErrorIteration(-1);
                report.setErrorMessage(e.getMessage());
                LOGGER.error("Model checker timed out: {}", e.getMessage());
                throw new JmcCheckerTimeoutException(e.getMessage());
            } else {
                report.setErrorIteration(-1);
                report.setErrorMessage(String.format("Model checking failed: %s", e.getMessage()));
                LOGGER.error("Model checking failed: {}", e.getMessage());
                throw new JmcCheckerException(e.getMessage());
            }
        } catch (Exception e) {
            report.setErrorIteration(-1);
            report.setErrorMessage(String.format("Model checking failed: %s", e.getMessage()));
            LOGGER.error("Model checking failed: {}", e.getMessage());
            throw new JmcCheckerException(e.getMessage(), e);
        } finally {
            Long endTime = System.nanoTime();
            JmcRuntime.tearDown();
            report.setTotalTimeMillis(endTime - startTime);
        }
        return report;
    }

    /**
     * Replays the given test target. The replay is handled by the Strategy
     *
     * @param target the test target to replay
     * @throws JmcCheckerException if an error occurs during replay
     */
    public void replay(JmcTestTarget target) throws JmcCheckerException {
        JmcRuntimeConfiguration runtimeConfig = config.toRuntimeConfiguration();
        JmcRuntime.setupReplay(runtimeConfig);
        Long startTime = System.currentTimeMillis();

        JmcModelCheckerReport dummyReport =
                new JmcModelCheckerReport(runtimeConfig.getReportPath());
        try {
            JmcRuntime.initIteration(0, dummyReport);
            target.invoke();
            RuntimeEvent mainEndEvent =
                    new RuntimeEvent.Builder()
                            .type(RuntimeEvent.Type.FINISH_EVENT)
                            .taskId(1L)
                            .build();
            JmcRuntime.updateEvent(mainEndEvent);
            JmcRuntime.resetIteration(0);
        } catch (HaltTaskException e) {
            LOGGER.debug("Halting execution: due to main thread halted: {}", e.getMessage());
        } catch (HaltExecutionException e) {
            dummyReport.setErrorMessage(e.getMessage());
            LOGGER.error("Halting execution: due to exception: {}", e.getMessage());
        } catch (AssertionError e) {
            dummyReport.setErrorMessage(
                    String.format("Halting execution due to assertion error: %s", e.getMessage()));
            LOGGER.error("Assertion error: {}", e.getMessage());
        } catch (HaltCheckerException e) {
            if (e.isOkay()) {
                LOGGER.info("Replay completed successfully.");
            } else {
                dummyReport.setErrorIteration(-1);
                dummyReport.setErrorMessage(String.format("Replaying failed: %s", e.getMessage()));
                LOGGER.error("Replaying failed: {}", e.getMessage());
            }
        } finally {
            Long endTime = System.currentTimeMillis();
            JmcRuntime.tearDown();
            dummyReport.setTotalTimeMillis(endTime - startTime);
        }
    }
}
