package org.mpisws.jmc.integrations.junit5.engine;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mpisws.jmc.checker.*;
import org.mpisws.jmc.checker.exceptions.JmcCheckerException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * Executes a JMC test method using the JMC Model Checker.
 *
 * <p>This class provides methods to execute a test method and check its behavior using the JMC
 * Model Checker. It can also replay the test method to verify its behavior against previously
 * recorded traces.
 */
public class JmcTestExecutor {

    private static final Logger LOGGER = LogManager.getLogger(JmcTestExecutor.class);

    /**
     * Executes a JMC test method and returns the report generated by the model checker.
     *
     * @param testMethod The test method to execute.
     * @param instance The instance of the class containing the test method.
     * @param config The configuration for the JMC checker.
     * @return A report containing the results of the model checking process.
     * @throws JmcCheckerException If an error occurs during model checking.
     */
    public static JmcModelCheckerReport execute(
            Method testMethod, Object instance, JmcCheckerConfiguration config)
            throws JmcCheckerException {
        LOGGER.debug("JmcTestExecutor Executing test: {}", testMethod.getName());
        JmcModelChecker checker = new JmcModelChecker(config);
        JmcTestTarget target =
                new JmcFunctionalTestTarget(
                        testMethod.getName(),
                        () -> {
                            try {
                                testMethod.invoke(instance);
                            } catch (IllegalAccessException | InvocationTargetException e) {
                                throw new RuntimeException(e);
                            }
                        });
        return checker.check(target);
    }

    /**
     * Replays a previously executed JMC test method to verify its behavior against recorded traces.
     *
     * @param testMethod The test method to replay.
     * @param instance The instance of the class containing the test method.
     * @param config The configuration for the JMC checker.
     * @throws JmcCheckerException If an error occurs during replaying the test method.
     */
    public static void executeReplay(
            Method testMethod, Object instance, JmcCheckerConfiguration config)
            throws JmcCheckerException {
        JmcModelChecker checker = new JmcModelChecker(config);
        JmcTestTarget target =
                new JmcFunctionalTestTarget(
                        testMethod.getName(),
                        () -> {
                            try {
                                testMethod.invoke(instance);
                            } catch (IllegalAccessException | InvocationTargetException e) {
                                throw new RuntimeException(e);
                            }
                        });
        checker.replay(target);
    }
}
